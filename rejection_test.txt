package handler

import (
	"context"
	"fmt"
	"os"
	"testing"
	"time"

	integration "github.com/jyouturer/gmail-ai/integration"
	"github.com/jyouturer/gmail-ai/internal/logging"
)

func TestMain(m *testing.M) {
	// Set up the logger for testing
	logger, err := logging.NewLogger()
	if err != nil {
		// Handle error
		panic(err)
	}
	logging.Logger = logger

	// Run the tests
	code := m.Run()

	// Clean up any resources here

	os.Exit(code)
}

func TestRejection(t *testing.T) {
	//packagetest.TestMain(nil)
	// Create a connection pool with 10 GRPCClient objects
	cp, err := integration.NewConnectionPool("localhost:50051", 2, time.Second*10)
	if err != nil {
		t.Errorf("Error creating connection pool: %v", err)
	}
	defer cp.Close()

	rc, err := cp.GetGRPCClient()

	defer cp.ReturnGRPCClient(rc)
	if err != nil {
		t.Errorf("Error get rejection chjeck: %v", err)
	}
	isRejection := IsRejection(context.Background(), rc, "email text goes here")

	fmt.Printf("res: %v\n", isRejection)
}

func TestHandleRejection(t *testing.T) {
	//packagetest.TestMain(nil)
	// Create a connection pool with 10 GRPCClient objects
	cp, err := integration.NewConnectionPool("localhost:50051", 2, time.Second*10)
	if err != nil {
		t.Errorf("Error creating connection pool: %v", err)
	}
	defer cp.Close()
	// create gmail service
	ignoreTestWithoutEnvironmentVariables(t, "GMAIL_CREDENTIALS", "GMAIL_TOKEN")
	gmailService, err := integration.CreateGmailService(os.Getenv("GMAIL_CREDENTIALS"), os.Getenv("GMAIL_TOKEN"))

	if err != nil {
		t.Errorf("error creating gmail service: %v", err)
	}
	fmt.Printf("gmailService: %v\n", gmailService)
	messageID := "1877976684734b16"
	msg, err := gmailService.Users.Messages.Get("me", messageID).Format("full").Do()
	if err != nil {
		t.Errorf("unable to retrieve message %v: %v\n", messageID, err)
	}

	// Create the client to call gRPC of the rejection classifier
	h := NewHandler(cp, gmailService)

	// Implement the HandleRejection method of the EmailHandlerFunc interface
	err = h.HandleRejection(context.Background(), msg)
	if err != nil {
		t.Errorf("Error handling rejection: %v", err)
	}
}

func ignoreTestWithoutEnvironmentVariables(t *testing.T, envVars ...string) {
	for _, envVar := range envVars {
		if os.Getenv(envVar) == "" {
			t.Skipf("environment variable %s not set", envVar)
		}
	}
}

func TestIsRejection(t *testing.T) {
	cp, err := integration.NewConnectionPool("localhost:50051", 2, time.Second*10)
	if err != nil {
		t.Errorf("Error creating connection pool: %v", err)
	}
	defer cp.Close()
	client, err := cp.GetGRPCClient()
	if err != nil {
		t.Errorf("Error get rejection chjeck: %v", err)
	}
	res := IsRejection(context.Background(), client, "Thank you for your interest in the Senior Engineering Manager, Quip role at Salesforce. Unfortunately, we are no longer hiring for this Your time and effort are greatly appreciated.")
	fmt.Printf("res: %v, err: %v", res, err)
}


type mockRejectionCheckerClient struct {
    IsRejectionFunc func(ctx context.Context, in *pb.IsRejectionRequest, opts ...grpc.CallOption) (*pb.IsRejectionResponse, error)
}

func (m *mockRejectionCheckerClient) IsRejection(ctx context.Context, in *pb.IsRejectionRequest, opts ...grpc.CallOption) (*pb.IsRejectionResponse, error) {
    return m.IsRejectionFunc(ctx, in, opts...)
}

func TestIsRejection(t *testing.T) {
    // Create a mock gRPC client that returns a predefined response
    mockClient := &mockRejectionCheckerClient{
        IsRejectionFunc: func(ctx context.Context, in *pb.IsRejectionRequest, opts ...grpc.CallOption) (*pb.IsRejectionResponse, error) {
            return &pb.IsRejectionResponse{IsRejection: true}, nil
        },
    }

    // Test the IsRejection function using the mock gRPC client
    res, err := IsRejection(context.Background(), mockClient, "Test text")
    if err != nil {
        t.Errorf("Unexpected error: %v", err)
    }
    if !res {
        t.Errorf("Expected true, got false")
    }
}
